Question 01-10.cpp is provided in folder

#include"Question 01-10.cpp"
queue<int> level_order(node *,int);
void print_elements_AtLevel(node *,int,queue<int> &);
int height(node*);
int height(node *ptr)
{
    int ltree , rtree , ht ;
    if(ptr==NULL)
        return 0 ;
    ltree = height(ptr->left) ;
    rtree = height(ptr->right) ;
    if(ltree >= rtree)
        ht = ltree + 1 ;
    else
        ht = rtree  + 1 ;
    return ht ;
}
void print_elements_AtLevel(node *ptr , int level , queue<int> &q)
{
    if(level==0 && ptr!=NULL)
    {
        q.push(ptr->data);
    }
    if(level!=0 && ptr!=NULL)
    {
        print_elements_AtLevel(ptr->left , level-1 , q);
        print_elements_AtLevel(ptr->right , level-1 , q);
    }
}
queue<int> level_order(node * ptr , int height)
{
    queue<int> q ;
    for(int i=0 ; i<height ; i++)
        print_elements_AtLevel(ptr,i,q);
    return q ;
}
int main()
{
    BST b ;
    b.insert(40);
    b.insert(30);
    b.insert(50);
    b.insert(25);
    b.insert(35);
    b.insert(45);
    b.insert(60);
    b.insert(15);
    b.insert(28);
    b.insert(55);
    b.insert(70);
    queue<int> q = level_order(b.getRoot(),height(b.getRoot()));
    while(!q.empty())
    {
        cout << q.front() << " " ;
        q.pop(); 
    }
    return 0 ;
}
