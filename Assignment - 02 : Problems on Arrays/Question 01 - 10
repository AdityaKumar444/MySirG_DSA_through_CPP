#include"arrayADT.cpp"
using namespace std ;
class ExtendedArray : public Array 
{
    public :
        ExtendedArray() : Array() {}
        ExtendedArray(int cap) : Array(cap) {}
        void sort();
        int Greatest();
        int Smallest();
        int sumOfAllElements();
        double average();
        void rotationRight();
        void removeDuplicate();
        int secondLargest();
        void swap(int,int);
}; 
void ExtendedArray::sort()
{
    int temp ;
    for(int i=0 ; i<count() ; i++)
    {
        for(int j=i+1 ; j<count() ; j++)
        {
            if(getElement(i)>getElement(j))
            {
                temp = getElement(j);
                edit(j,getElement(i));
                edit(i,temp);
            }
        }
    }
}
int ExtendedArray::Greatest()
{
    int greatest = -2147483647 ;
    for (int i=0; i<count(); i++)
    {
        if(greatest<getElement(i))
        greatest = getElement(i);
    }
    return greatest ;
}
int ExtendedArray::Smallest()
{
    int smallest = 2147483647 ;
    for (int i=0; i<count(); i++)
    {
        if(smallest>getElement(i))
        smallest = getElement(i);
    }
    return smallest ;
}
int ExtendedArray::sumOfAllElements()
{
    int i , sum = 0 ;
    for (i=0; i<count(); i++)
    sum = sum + getElement(i);
    return sum ;
}
double ExtendedArray::average()
{
    double avg = 0 , total = count() ;
    avg = sumOfAllElements() / total ;
    return avg ;
}
void ExtendedArray::rotationRight()
{
    int temp ;
    for (int i = count()-1 ; i>=1 ; i--)
    {
        temp = getElement(i) ;
        edit(i,getElement(i-1)) ;
        edit(i-1,temp);
    }
}
void ExtendedArray::removeDuplicate()
{
    bool x = emptyOrNot() ;
    if(x==true)
    cout << "\nEmpty Array\n" ;
    else if(x==false)
    {
        int cap = this->Greatest();
        cap = cap + 1 ;
        int *p {new int[cap]{}};
        for(int i=0 ; i<count() ; i++)
        {
            p[getElement(i)]++ ;
        }
        for(int i=count()-1 ; i>=0 ; i--)
        {
            for(int j=0 ; j<cap ; j++)
            {
                if(getElement(i)==j)
                {
                    if(p[j]>1)
                    {
                        this->del(i);
                        p[j]--;
                    }
                }
            }
        }
        delete[] p ;
    }
}
int ExtendedArray::secondLargest()
{
    sort();
    int s_large = getElement(count()-2) ;
    return s_large ;
}
void ExtendedArray::swap(int index1 , int index2)
{
    int temp ;
    temp = getElement(index1) ;
    edit(index1,getElement(index2)) ;
    edit(index2,temp);
}
