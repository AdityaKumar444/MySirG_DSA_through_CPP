#include<bits/stdc++.h>
using namespace std ;
class Array
{
    private:
        int capacity , last_index=-1 , *ptr ;
    public:
        void sort();
        void swap(int,int);
        bool emptyOrNot();
        bool fullOrNot();
        void append(int);
        void removeDuplicate();
        int getElement(int);
        int Greatest();
        void del(int);
        void insert(int , int);
        int findElement(int);
        int Smallest();
        int sumOfAllElements();
        double average();
        void display();
        void rotationRight();
        int secondLargest();
        Array(){}
        Array(int n)
        {
            capacity = n ;
            ptr = new int[capacity];
        }
        void edit(int index , int element)
        {
            if(index>=0 && index<=last_index)
            ptr[index] = element ; 
        }
        int countElements()
        {
            return (last_index+1) ;
        }
        ~Array()
        {
            delete[]ptr;
        }
};
bool Array::emptyOrNot()
{
    if(last_index==-1)
    return true ;
    else
    return false ;
}
bool Array::fullOrNot()
{
    if(last_index==(capacity-1))
    return true ;
    else
    return false ;
}
void Array::append(int element)
{
    if(last_index==capacity-1)
    cout << "no space available" << endl;
    else
    {
        last_index++;
        ptr[last_index] = element ;
    }
}
void Array::display()
{
    for(int i=0 ; i<=last_index ; i++)
    cout << ptr[i] << " " ;
    cout << endl ;
}
int Array::secondLargest()
{
    sort();
    int s_large = ptr[last_index-1] ;
    return s_large ;
}
void Array::removeDuplicate()
{
    bool x = emptyOrNot() ;
    if(x==true)
    cout << "\nEmpty Array\n" ;
    else if(x==false)
    {
        int cap = this->Greatest();
        cap = cap + 1 ;
        int *p {new int[cap]{}};
        for(int i=0 ; i<=last_index ; i++)
        {
            p[ptr[i]]++ ;
        }
        for(int i=last_index ; i>=0 ; i--)
        {
            for(int j=0 ; j<cap ; j++)
            {
                if(ptr[i]==j)
                {
                    if(p[j]>1)
                    {
                        this->del(i);
                        p[j]--;
                    }
                }
            }
        }
        delete[] p ;
    }
}
int Array::getElement(int index)
{
    if(index>=0 && index<=last_index)
    return ptr[index];
    else
    return -1 ;
}
void Array::rotationRight()
{
    int temp ;
    for (int i = last_index ; i>=1 ; i--)
    {
        temp = ptr[i-1];
        ptr[i-1] = ptr[i] ;
        ptr[i] = temp ;
    }
}
int Array::findElement(int num)
{
    for(int i=0 ; i<=last_index ; i++)
    {
        if(ptr[i]==num)
        return i ;
    }
    return -1 ;
}
void Array::insert(int index , int element)
{
    if(last_index==capacity-1)
    cout << "no space available" << endl;
    else if(index<0 || index>last_index+1)
    cout << "invalid index\n" ;
    else
    {
        for(int i=last_index+1 ; i>index ; i--)
        ptr[i] = ptr[i-1] ;   
        ptr[index] = element ; 
        last_index++;
    }
}
int Array::sumOfAllElements()
{
    int i , sum = 0 ;
    for (i=0; i<=last_index; i++)
    sum = sum + ptr[i];
    return sum ;
}
double Array::average()
{
    double avg = 0 , total = countElements() ;
    avg = sumOfAllElements() / total ;
    return avg ;
}
void Array::sort()
{
    int temp ;
    for(int i=0 ; i<=last_index ; i++)
    {
        for(int j=i+1 ; j<=last_index ; j++)
        {
            if(ptr[i]>ptr[j])
            {
                temp = ptr[j];
                ptr[j] = ptr[i];
                ptr[i] = temp;
            }
        }
    }
}
int Array::Greatest()
{
    int greatest = -2147483647 ;
    for (int i=0; i<=last_index; i++)
    {
        if(greatest<ptr[i])
        greatest = ptr[i];
    }
    return greatest ;
}
int Array::Smallest()
{
    int smallest = 2147483647 ;
    for (int i=0; i<=last_index; i++)
    {
        if(smallest>ptr[i])
        smallest = ptr[i];
    }
    return smallest ;
}
void Array::del(int index)
{
    if(last_index==-1)
    cout << "empty array\n" ;
    else if(index<0 || index>last_index+1)
    cout << "invalid index\n" ;
    else
    {
        for(int i=index ; i<last_index ; i++)
        ptr[i] = ptr[i+1] ;
        last_index = last_index - 1 ;
    }
}
void Array::swap(int index1 , int index2)
{
    int temp ;
    temp = ptr[index1] ;
    ptr[index1] = ptr[index2] ;
    ptr[index2] = temp ;
}
int main () 
{
    Array a(7);
    return 0 ;
}
